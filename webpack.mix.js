let mix = require('laravel-mix');

/*
 |--------------------------------------------------------------------------
 | Mix Asset Management
 |--------------------------------------------------------------------------
 |
 | Mix provides a clean, fluent API for defining some Webpack build steps
 | for your Laravel application. By default, we are compiling the Sass
 | file for your application, as well as bundling up your JS files.
 |
 */

mix
  // Compile the JS for the tracker to modules/base/js/owa.tracker-combined-min.js
  .js([
    'modules/base/js-src/owa.js',
    'modules/base/js-src/owa.tracker.js'
  ], 'modules/base/js/owa.tracker-combined-min.js')
  // Compile the basic owa.css only.
  .sass('modules/base/sass/owa.scss', 'modules/base/css/owa.css')
  // Compile the CSS for reporting.
  // SASS is used for OWA specific CSS
  .sass('modules/base/sass/owa.reporting-combined.scss',
        'modules/base/css/owa.reporting-combined.css')
  // Pre-minified and packaged CSS is combined into a libs CSS package.
  .combine([
    'modules/base/css/jquery-ui.css',
    'modules/base/css/jquery.ui.selectmenu.css',
    'modules/base/css/ui.jqgrid.css',
  ], 'modules/base/css/owa.reporting-combined-libs.css')
  // Compile the JS for reporting.
  // Pre-minified and packaged JS is combined into a libs CSS package.
  .combine([
    'modules/base/js-src/includes/jquery/jquery-1.6.4.min.js',
    'modules/base/js-src/includes/jquery/jquery.sprintf.js',
    'modules/base/js-src/includes/jquery/jquery-ui-1.8.12.custom.min.js',
    'modules/base/js-src/includes/jquery/jquery.ui.selectmenu.js',
    'modules/base/js-src/includes/jquery/jquery.sparkline.min.js',
    'modules/base/js-src/includes/jquery/jquery.jqGrid.min.js',
    'modules/base/js-src/includes/jquery/flot_v0.7/jquery.flot.min.js',
    'modules/base/js-src/includes/jquery/flot_v0.7/jquery.flot.resize.min.js',
    'modules/base/js-src/includes/jquery/flot_v0.7/jquery.flot.pie.min.js',
    'modules/base/js-src/includes/jquery/jQote2/jquery.jqote2.min.js',
    'modules/base/js-src/includes/jquery/chosen.jquery.min.js',
  ], 'modules/js/owa.reporting-libs.js')
  // For the sake of maintaining separation between source and distribution files
  // we copy some libraries that are accessed by the client, e.g. OWA.requireJs()
  .copy('modules/base/js-src/includes/jquery/jquery-ui-1.8.12.custom.min.js',
        'modules/base/js/includes/jquery/jquery-ui-1.8.12.custom.min.js')
  .copy('modules/base/js-src/includes/jquery/jQote2/jquery.jqote2.min.js',
        'modules/base/js/includes/jquery/jQote2/jquery.jqote2.min.js')
  // Compile OWA-specific JS
  .js([
    'modules/base/js-src/owa.js',
    'modules/base/js-src/owa.report.js',
    'modules/base/js-src/owa.resultSetExplorer.js',
    'modules/base/js-src/owa.sparkline.js',
    'modules/base/js-src/owa.areachart.js',
    'modules/base/js-src/owa.piechart.js',
    'modules/base/js-src/owa.kpibox.js',
  ], 'modules/js/owa.reporting.js')
  .options({ processCssUrls: false })
;

// Full API
// mix.js(src, output);
// mix.react(src, output); <-- Identical to mix.js(), but registers React Babel compilation.
// mix.preact(src, output); <-- Identical to mix.js(), but registers Preact compilation.
// mix.coffee(src, output); <-- Identical to mix.js(), but registers CoffeeScript compilation.
// mix.ts(src, output); <-- TypeScript support. Requires tsconfig.json to exist in the same folder as webpack.mix.js
// mix.extract(vendorLibs);
// mix.sass(src, output);
// mix.less(src, output);
// mix.stylus(src, output);
// mix.postCss(src, output, [require('postcss-some-plugin')()]);
// mix.browserSync('my-site.test');
// mix.combine(files, destination);
// mix.babel(files, destination); <-- Identical to mix.combine(), but also includes Babel compilation.
// mix.copy(from, to);
// mix.copyDirectory(fromDir, toDir);
// mix.minify(file);
// mix.sourceMaps(); // Enable sourcemaps
// mix.version(); // Enable versioning.
// mix.disableNotifications();
// mix.setPublicPath('path/to/public');
// mix.setResourceRoot('prefix/for/resource/locators');
// mix.autoload({}); <-- Will be passed to Webpack's ProvidePlugin.
// mix.webpackConfig({}); <-- Override webpack.config.js, without editing the file directly.
// mix.babelConfig({}); <-- Merge extra Babel configuration (plugins, etc.) with Mix's default.
// mix.then(function () {}) <-- Will be triggered each time Webpack finishes building.
// mix.when(condition, function (mix) {}) <-- Call function if condition is true.
// mix.override(function (webpackConfig) {}) <-- Will be triggered once the webpack config object has been fully generated by Mix.
// mix.dump(); <-- Dump the generated webpack config object to the console.
// mix.extend(name, handler) <-- Extend Mix's API with your own components.
// mix.options({
//   extractVueStyles: false, // Extract .vue component styling to file, rather than inline.
//   globalVueStyles: file, // Variables file to be imported in every component.
//   processCssUrls: true, // Process/optimize relative stylesheet url()'s. Set to false, if you don't want them touched.
//   purifyCss: false, // Remove unused CSS selectors.
//   terser: {}, // Terser-specific options. https://github.com/webpack-contrib/terser-webpack-plugin#options
//   postCss: [] // Post-CSS options: https://github.com/postcss/postcss/blob/master/docs/plugins.md
// });
